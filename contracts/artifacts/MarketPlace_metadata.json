{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_description",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_link",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "_tags",
						"type": "string[]"
					}
				],
				"name": "addNonSellableProduct",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_productSeller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_productBuyer",
						"type": "address"
					}
				],
				"name": "buyProduct",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "checkProductOwnership",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_partialTitle",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_category",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_date",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startIndexForSearch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxResults",
						"type": "uint256"
					}
				],
				"name": "filterSellingProducts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "link",
								"type": "string"
							},
							{
								"internalType": "string[]",
								"name": "tags",
								"type": "string[]"
							},
							{
								"internalType": "bool",
								"name": "forSale",
								"type": "bool"
							}
						],
						"internalType": "struct MarketPlace.Product[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_startIndexForSearch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxResults",
						"type": "uint256"
					}
				],
				"name": "getAllProductsForSale",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "link",
								"type": "string"
							},
							{
								"internalType": "string[]",
								"name": "tags",
								"type": "string[]"
							},
							{
								"internalType": "bool",
								"name": "forSale",
								"type": "bool"
							}
						],
						"internalType": "struct MarketPlace.Product[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "getHistoryForProduct",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "fees",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "datetime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "buyer",
								"type": "address"
							}
						],
						"internalType": "struct MarketPlace.TransactionDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_startIndexForSearch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxResults",
						"type": "uint256"
					}
				],
				"name": "getOwnerProducts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "description",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "link",
								"type": "string"
							},
							{
								"internalType": "string[]",
								"name": "tags",
								"type": "string[]"
							},
							{
								"internalType": "bool",
								"name": "forSale",
								"type": "bool"
							}
						],
						"internalType": "struct MarketPlace.Product[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "getSellableProductDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "fees",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "datetime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "productId",
								"type": "uint256"
							}
						],
						"internalType": "struct MarketPlace.SellableProduct",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "listExistingProductForSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_description",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_link",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "_tags",
						"type": "string[]"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "listProductForSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "ownedSellableProducts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "datetime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "productId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "productHistory",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "datetime",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_feePercentage",
						"type": "uint256"
					}
				],
				"name": "setFeePercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
					"params": {
						"_approved": "The new approved NFT controller",
						"_tokenId": "The NFT to approve"
					}
				},
				"balanceOf(address)": {
					"details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
					"params": {
						"_owner": "An address for whom to query the balance"
					},
					"returns": {
						"_0": "The number of NFTs owned by `_owner`, possibly zero"
					}
				},
				"getApproved(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT.",
					"params": {
						"_tokenId": "The NFT to find the approved address for"
					},
					"returns": {
						"_0": "The approved address for this NFT, or the zero address if there is none"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_operator": "The address that acts on behalf of the owner",
						"_owner": "The address that owns the NFTs"
					},
					"returns": {
						"_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"ownerOf(uint256)": {
					"details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
					"params": {
						"_tokenId": "The identifier for an NFT"
					},
					"returns": {
						"_0": "The address of the owner of the NFT"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer",
						"data": "Additional data with no specified format, sent in call to `_to`"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
					"params": {
						"_approved": "True if the operator is approved, false to revoke approval",
						"_operator": "Address to add to the set of authorized operators"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "Change or reaffirm the approved address for an NFT"
				},
				"balanceOf(address)": {
					"notice": "Count all NFTs assigned to an owner"
				},
				"getApproved(uint256)": {
					"notice": "Get the approved address for a single NFT"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Query if an address is an authorized operator for another address"
				},
				"ownerOf(uint256)": {
					"notice": "Find the owner of an NFT"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MarketPlace.sol": "MarketPlace"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Context.sol": {
			"keccak256": "0x2c36c9489879b7c91cdd73bbe8b2584f401aa26f4f252c04f053e824d6ca75c6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ef20575fc12fd27f252acd28a8d0f65893832f29fd9c82f7ec165121af4572f",
				"dweb:/ipfs/QmZMCoWWDTjhs1CNFMWv4JNWVyyeuzyqteCHhF4heCUYJJ"
			]
		},
		"contracts/ERC721.sol": {
			"keccak256": "0x02a7221158cb66540d7abf192ce27e3ee96a9ed6faf3d32613585a6dbf36da4f",
			"urls": [
				"bzz-raw://023e0eb6c8c96b9afdb8215c43e05cf503cf0b76cf6a65e5edb1584fec674c03",
				"dweb:/ipfs/QmTULjvzgZVb6fRm4v3ve7zeQX4v9SshfAu2cSwtjoasyA"
			]
		},
		"contracts/MarketPlace.sol": {
			"keccak256": "0x1d36faa4858904db8c2441e10ff142ef61255e56fae9d6036aded888f1c822ab",
			"urls": [
				"bzz-raw://bfb8baf7372c27080898cf406e70b9080e1790c5a0290bf8b31814262c5a2106",
				"dweb:/ipfs/QmX1RAFCEnWf47WHd39VGFGshCQSYtQ1T9pxYUExa7z7BN"
			]
		},
		"contracts/Ownable.sol": {
			"keccak256": "0xe4186a79defe76ab778ee2ab62c6002c4de78b721209fbc423f5e8028e7879c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca8a398e817d72c207ca0ff7bc06171be8f2f11ee2e3dd1ad30c3c31e026a06c",
				"dweb:/ipfs/QmXxbKHjwZvuGkUnPvcivbPsyvRowYsduXgT5zfYKGmi57"
			]
		}
	},
	"version": 1
}